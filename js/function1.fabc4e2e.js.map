{"version":3,"sources":["webpack:///./src/views/webpack/performance/prerender-spa-plugin/index.vue?54e7","webpack:///src/views/webpack/performance/prerender-spa-plugin/index.vue","webpack:///./src/views/webpack/performance/prerender-spa-plugin/index.vue?df84","webpack:///./src/views/webpack/performance/prerender-spa-plugin/index.vue","webpack:///./src/views/webpack/js/summary/index.vue?9f57","webpack:///src/views/webpack/js/summary/index.vue","webpack:///./src/views/webpack/js/summary/index.vue?994e","webpack:///./src/views/webpack/js/summary/index.vue","webpack:///./src/assets/img/fb.png","webpack:///./src/views/webpack/performance/summary/index.vue?5bfe","webpack:///src/views/webpack/performance/summary/index.vue","webpack:///./src/views/webpack/performance/summary/index.vue?5885","webpack:///./src/views/webpack/performance/summary/index.vue","webpack:///./src/assets/img/rerend2.png","webpack:///./src/assets/img/prerend.png","webpack:///./src/assets/img/cache.png","webpack:///./src/views/webpack/css/css-loader/index.vue?0348","webpack:///src/views/webpack/css/css-loader/index.vue","webpack:///./src/views/webpack/css/css-loader/index.vue?3b8d","webpack:///./src/views/webpack/css/css-loader/index.vue"],"names":["render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","staticClass","component","module","exports"],"mappings":"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","file":"js/function1.fabc4e2e.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',[_vm._v(\"单页面首屏加载慢和SEO问题\")]),_c('p',[_vm._v(\"可以使用以下方案\")]),_c('h2',[_vm._v(\"1. prerender-span-plugin预渲染插件\")]),_c('p',[_vm._v(\"prerender-span-plugin预渲染插件，就是在打包的时候根据指定的路由，把路由对应的页面渲染为html输出， 那么指定多少路由打包的时候就输出多少html页面，生成了html页面相当于原生h5，浏览器直接从服务端获取 相应的html，从而降低了首屏的显示时间 \")]),_c('h3',[_vm._v(\"原理：\")]),_c('p',[_vm._v(\"prerender-span-plugin是利用了Chrome推出的Puppeteer库，进行页面的爬取。Puppeteer是一个Node库， 默认为headless模式(无头模式)，在无需UI的情况下通过 DevTools 协议控制Chrome;在webpack构建阶段的 最后，在本地启动Puppeteer服务，然后根据指定的预渲染路由，将相应的页面输出到html文件中，并建立相应的目录 \")]),_c('img',{attrs:{\"src\":require(\"@img/prerend.png\"),\"alt\":\"prerender-span-plugin\"}}),_c('h3',[_vm._v(\"使用:\")]),_c('p',[_vm._v(\"前提条件，vue的路由必须使用history模式\")]),_c('p',[_vm._v(\"安装\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"        cnpm i -D prerender-span-plugin\\n    \")]),_c('p',[_vm._v(\"配置webpack.config.js\")]),_c('pre',[_vm._v(\"        const PrerenderSPAPlugin = require('prerender-spa-plugin')\\n        const Renderer = PrerenderSPAPlugin.PuppeteerRenderer\\n        plugins: [\\n            new PrerenderSPAPlugin({\\n                staticDir: path.join(__dirname, 'dist'),  // 注意路径不能错\\n                // indexPath: path.join(__dirname, '../dist', 'index.html'), \\n                routes: ['/', '/summary','/babel','/performance','/postcss','/prerenderSpaPlugin'],\\n                renderer: new Renderer({\\n                    inject: {\\n                        foo: 'bar'\\n                    },\\n                    headless: true, \\n                    renderAfterDocumentEvent: 'render-active' \\n                    // renderAfterElementExists: '.container', \\n                    // renderAfterTime: 5000 \\n                })\\n            })\\n        ]\\n    \")]),_c('p',[_vm._v(\"staticDir：预渲染之后文件输出目录\")]),_c('p',[_vm._v(\"indexPath: 静态模板页面\")]),_c('p',[_vm._v(\"routes: 预渲染的路由\")]),_c('p',[_vm._v(\"renderer: 渲染器\")]),_c('p',[_vm._v(\"inject: 像预渲染页面注入数据，默认挂在window.__PRERENDER_INJECTED对象上，可以通过window.__PRERENDER_INJECTED.foo在预渲染页面取值\")]),_c('p',[_vm._v(\"headless：是否是无浏览器窗口\")]),_c('p',[_vm._v(\"renderAfterDocumentEvent： 等到指定的事件触发之后再去进行预渲染\")]),_c('p',[_vm._v(\"renderAfterElementExists: 在指定元素渲染之后再去触发预渲染\")]),_c('p',[_vm._v(\"renderAfterTime: 指定时间之后进行预渲染\")]),_c('p',[_vm._v(\"配置main.js\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"        new Vue({\\n            router,\\n            store,\\n            render: h => h(App),\\n            mounted(){ // vue页面挂载之后进行预渲染 \\n                document.dispatchEvent(new Event('render-active'))\\n            }\\n        }).$mount('#app')\\n    \")]),_c('h2',[_vm._v(\"缺点：\")]),_c('p',[_vm._v(\"1. 因为是根据路由生成html,所以对于动态的路由是不起作用\")]),_c('p',[_vm._v(\"2. 并且不能有同名路由，否则最终只生成一个对应路由的html\")]),_c('h2',[_vm._v(\"优化SEO\")]),_c('p',[_vm._v(\"通过vue-meta-info插件进行SEO优化，一般和prerender-span-plugin预渲染插件配合使用\")]),_c('h3',[_vm._v(\"原理：\")]),_c('p',[_vm._v(\"根据配置的metaInfo，会在相应的页面中动态的创建title、meta和link元素\")]),_c('h3',[_vm._v(\"使用：\")]),_c('p',[_vm._v(\"安装\")]),_c('pre',[_vm._v(\"        cnpm i -D vue-meta-info\\n    \")]),_c('p',[_vm._v(\"配置main.js\")]),_c('pre',[_vm._v(\"        import MetaInfo from 'vue-meta-info' \\n        Vue.use(MetaInfo)  // 使用meta\\n    \")]),_c('p',[_vm._v(\"组件中使用\")]),_c('pre',[_vm._v(\"        export default {\\n            metaInfo: {   // 使用vue-meta-info插件\\n                title: '性能优化', // set a title\\n                meta: [{                 // set meta\\n                    name: '性能优化',\\n                    content: '性能优化'\\n                }],\\n                link: [{                 // set link\\n                    rel: '性能优化',\\n                    href: this.href  // 动态配置\\n                }]\\n            }\\n        }\\n    \")]),_c('p',[_vm._v(\"输出结果：\")]),_c('img',{attrs:{\"src\":require(\"@img/rerend2.png\"),\"alt\":\"\"}})])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <h1>单页面首屏加载慢和SEO问题</h1>\r\n        <p>可以使用以下方案</p>\r\n        <h2>1. prerender-span-plugin预渲染插件</h2>\r\n        <p>prerender-span-plugin预渲染插件，就是在打包的时候根据指定的路由，把路由对应的页面渲染为html输出，\r\n           那么指定多少路由打包的时候就输出多少html页面，生成了html页面相当于原生h5，浏览器直接从服务端获取\r\n           相应的html，从而降低了首屏的显示时间\r\n        </p>\r\n        <h3>原理：</h3>\r\n        <p>prerender-span-plugin是利用了Chrome推出的Puppeteer库，进行页面的爬取。Puppeteer是一个Node库，\r\n           默认为headless模式(无头模式)，在无需UI的情况下通过 DevTools 协议控制Chrome;在webpack构建阶段的\r\n           最后，在本地启动Puppeteer服务，然后根据指定的预渲染路由，将相应的页面输出到html文件中，并建立相应的目录\r\n        </p>\r\n        <img src=\"@img/prerend.png\" alt=\"prerender-span-plugin\">\r\n        <h3>使用:</h3>  \r\n        <p>前提条件，vue的路由必须使用history模式</p>\r\n        <p>安装</p>  \r\n        <pre class=\"code\">\r\n            cnpm i -D prerender-span-plugin\r\n        </pre>\r\n        <p>配置webpack.config.js</p>\r\n        <pre>\r\n            const PrerenderSPAPlugin = require('prerender-spa-plugin')\r\n            const Renderer = PrerenderSPAPlugin.PuppeteerRenderer\r\n            plugins: [\r\n                new PrerenderSPAPlugin({\r\n                    staticDir: path.join(__dirname, 'dist'),  // 注意路径不能错\r\n                    // indexPath: path.join(__dirname, '../dist', 'index.html'), \r\n                    routes: ['/', '/summary','/babel','/performance','/postcss','/prerenderSpaPlugin'],\r\n                    renderer: new Renderer({\r\n                        inject: {\r\n                            foo: 'bar'\r\n                        },\r\n                        headless: true, \r\n                        renderAfterDocumentEvent: 'render-active' \r\n                        // renderAfterElementExists: '.container', \r\n                        // renderAfterTime: 5000 \r\n                    })\r\n                })\r\n            ]\r\n        </pre>\r\n        <p>staticDir：预渲染之后文件输出目录</p>\r\n        <p>indexPath: 静态模板页面</p>\r\n        <p>routes: 预渲染的路由</p>\r\n        <p>renderer: 渲染器</p>\r\n        <p>inject: 像预渲染页面注入数据，默认挂在window.__PRERENDER_INJECTED对象上，可以通过window.__PRERENDER_INJECTED.foo在预渲染页面取值</p>\r\n        <p>headless：是否是无浏览器窗口</p>\r\n        <p>renderAfterDocumentEvent： 等到指定的事件触发之后再去进行预渲染</p>\r\n        <p>renderAfterElementExists: 在指定元素渲染之后再去触发预渲染</p>\r\n        <p>renderAfterTime: 指定时间之后进行预渲染</p>\r\n        <p>配置main.js</p>\r\n        <pre class=\"code\">\r\n            new Vue({\r\n                router,\r\n                store,\r\n                render: h => h(App),\r\n                mounted(){ // vue页面挂载之后进行预渲染 \r\n                    document.dispatchEvent(new Event('render-active'))\r\n                }\r\n            }).$mount('#app')\r\n        </pre>\r\n        <h2>缺点：</h2>\r\n        <p>1. 因为是根据路由生成html,所以对于动态的路由是不起作用</p>\r\n        <p>2. 并且不能有同名路由，否则最终只生成一个对应路由的html</p>\r\n\r\n        <h2>优化SEO</h2>\r\n        <p>通过vue-meta-info插件进行SEO优化，一般和prerender-span-plugin预渲染插件配合使用</p>\r\n        <h3>原理：</h3>\r\n        <p>根据配置的metaInfo，会在相应的页面中动态的创建title、meta和link元素</p>\r\n        <h3>使用：</h3>\r\n        <p>安装</p>\r\n        <pre>\r\n            cnpm i -D vue-meta-info\r\n        </pre>\r\n        <p>配置main.js</p>\r\n        <pre>\r\n            import MetaInfo from 'vue-meta-info' \r\n            Vue.use(MetaInfo)  // 使用meta\r\n        </pre>\r\n        <p>组件中使用</p>\r\n        <pre>\r\n            export default {\r\n                metaInfo: {   // 使用vue-meta-info插件\r\n                    title: '性能优化', // set a title\r\n                    meta: [{                 // set meta\r\n                        name: '性能优化',\r\n                        content: '性能优化'\r\n                    }],\r\n                    link: [{                 // set link\r\n                        rel: '性能优化',\r\n                        href: this.href  // 动态配置\r\n                    }]\r\n                }\r\n            }\r\n        </pre>\r\n        <p>输出结果：</p>\r\n        <img src=\"@img/rerend2.png\" alt=\"\">\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    \r\n}\r\n</script>\r\n<style lang=\"css\" scoped>\r\n\r\n</style>","import mod from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=a34291e2&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a34291e2\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',[_vm._v(\"babel总结\")]),_c('h2',[_vm._v(\"原因：\")]),_c('p',[_vm._v(\"不同浏览器中对最新标准的es支持度不尽相同，相同浏览器的不同版本支持度也不相同，因此为了开发者能够使用最新的标准 语法去兼容所有主流浏览器，就出现了babel \")]),_c('h2',[_vm._v(\"原理：\")]),_c('p',[_vm._v(\"babel和webpack、postcss一样，仅仅提供代码的分析，真正的转换是借助于插件完成\")]),_c('h3',[_vm._v(\"1.babel的安装\")]),_c('p',[_vm._v(\"安装两个库\")]),_c('p',[_vm._v(\"- @babel/core: babel的核心库，提供了编译时需要的所有api\")]),_c('p',[_vm._v(\"- @bale/cli: babel命令行工具\")]),_c('p',[_vm._v(\"npm i -D @babel/core @babel/cli\")]),_c('h3',[_vm._v(\"2. babel的使用\")]),_c('p',[_vm._v(\"- 按文件编译\")]),_c('p',[_vm._v(\" babel 要编译的文件 -o 编译结果的文件\")]),_c('p',[_vm._v(\"- 按目录编译\")]),_c('p',[_vm._v(\" babel 要编译的目录 -o 存放编译结果的目录\")]),_c('h3',[_vm._v(\"3. babel的配置\")]),_c('p',[_vm._v(\"babel和postcss一样，既有预设又有插件(预设就是一些常用的插件的集合)\")]),_c('p',[_vm._v(\"根目录创建一个.babelrc的文件，配置如下代码\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"        {\\n            \\\"presets\\\": [],  // 预设\\n            \\\"plugins\\\": []   // 插件\\n        }\\n    \")]),_c('h2',[_vm._v(\" bale预设\")]),_c('p',[_vm._v(\"常见的预设有@babel/preset-env,可以使用最新标准的es语法，无语安装额外的插件\")]),_c('p',[_vm._v(\"配置如下：\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"        {\\n            \\\"presets\\\": [\\n                \\\"@babel/preset-env\\\"\\n            ]\\n        }\\n    \")]),_c('p',[_vm._v(\"预设的使用需要指明兼容的浏览器\")]),_c('p',[_vm._v(\"和postcss一样，需要创建.browserslistrc文件来描述兼容的浏览器范围\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"        last 3 version\\n        > 1%\\n        no ie <= 8\\n    \")]),_c('p',[_vm._v(\"给预设设置自身的配置\")]),_c('p',[_vm._v(\"常见的配置有useBuiltIns,预设仅仅转换新的语法并不会对新的api进行转换,默认是false, 不能够使用最新的Esapi,可以设置为usage \")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"        {\\n            \\\"presets\\\": [\\n                [\\\"@babel/preset-env\\\",{\\n                    \\\"useBuiltIns\\\": 'usage',\\n                    \\\"corejs\\\": 3  // 指定corejs的版本\\n                }]  \\n            ]\\n        }\\n    \")]),_c('h2',[_vm._v(\"babel插件\")]),_c('p',[_vm._v(\"条件：比预设更加广泛，预设只能转换已经形成标准的es语法，对于提案的和最新的非标准Es语法还是不能够转换\")]),_c('p',[_vm._v(\"安装core-js和pregenerator-runtime插件可以使用最新的esapi,比如promise,asncy等\")]),_c('p',[_vm._v(\"core-js: 提供转换的api\")]),_c('p',[_vm._v(\"pregenerator-runtime: 用于转换generator迭代器\")]),_c('p',[_vm._v(\"1. babel-plugin-transform-remove-console\")]),_c('p',[_vm._v(\"打包的时候删除js中的所有console\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"        {\\n            \\\"plugins\\\": [\\n                [\\n                \\\"babel-plugin-transform-remove-console\\\"\\n                ]\\n            ]\\n            }\\n    \")])])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <h1>babel总结</h1>\r\n        <h2>原因：</h2>\r\n        <p>不同浏览器中对最新标准的es支持度不尽相同，相同浏览器的不同版本支持度也不相同，因此为了开发者能够使用最新的标准\r\n           语法去兼容所有主流浏览器，就出现了babel\r\n        </p>\r\n        <h2>原理：</h2>\r\n        <p>babel和webpack、postcss一样，仅仅提供代码的分析，真正的转换是借助于插件完成</p>\r\n        <h3>1.babel的安装</h3>\r\n        <p>安装两个库</p>\r\n        <p>- @babel/core: babel的核心库，提供了编译时需要的所有api</p>\r\n        <p>- @bale/cli: babel命令行工具</p>\r\n        <p>npm i -D @babel/core @babel/cli</p>\r\n        <h3>2. babel的使用</h3>\r\n        <p>- 按文件编译</p>\r\n        <p> babel 要编译的文件 -o 编译结果的文件</p>\r\n        <p>- 按目录编译</p>\r\n        <p> babel 要编译的目录 -o 存放编译结果的目录</p>\r\n        <h3>3. babel的配置</h3>\r\n        <p>babel和postcss一样，既有预设又有插件(预设就是一些常用的插件的集合)</p>\r\n        <p>根目录创建一个.babelrc的文件，配置如下代码</p>\r\n        <pre class=\"code\">\r\n            {\r\n                \"presets\": [],  // 预设\r\n                \"plugins\": []   // 插件\r\n            }\r\n        </pre>\r\n        <h2> bale预设</h2>\r\n        <p>常见的预设有@babel/preset-env,可以使用最新标准的es语法，无语安装额外的插件</p>\r\n        <p>配置如下：</p>\r\n        <pre class=\"code\">\r\n            {\r\n                \"presets\": [\r\n                    \"@babel/preset-env\"\r\n                ]\r\n            }\r\n        </pre>\r\n        <p>预设的使用需要指明兼容的浏览器</p>\r\n        <p>和postcss一样，需要创建.browserslistrc文件来描述兼容的浏览器范围</p>\r\n        <pre class=\"code\">\r\n            last 3 version\r\n            > 1%\r\n            no ie <= 8\r\n        </pre>\r\n        <p>给预设设置自身的配置</p>\r\n        <p>常见的配置有useBuiltIns,预设仅仅转换新的语法并不会对新的api进行转换,默认是false,\r\n            不能够使用最新的Esapi,可以设置为usage\r\n        </p>\r\n        <pre class=\"code\">\r\n            {\r\n                \"presets\": [\r\n                    [\"@babel/preset-env\",{\r\n                        \"useBuiltIns\": 'usage',\r\n                        \"corejs\": 3  // 指定corejs的版本\r\n                    }]  \r\n                ]\r\n            }\r\n        </pre>\r\n        <h2>babel插件</h2>\r\n        <p>条件：比预设更加广泛，预设只能转换已经形成标准的es语法，对于提案的和最新的非标准Es语法还是不能够转换</p>\r\n        <p>安装core-js和pregenerator-runtime插件可以使用最新的esapi,比如promise,asncy等</p>\r\n        <p>core-js: 提供转换的api</p>\r\n        <p>pregenerator-runtime: 用于转换generator迭代器</p>\r\n        <p>1. babel-plugin-transform-remove-console</p>\r\n        <p>打包的时候删除js中的所有console</p>\r\n        <pre class=\"code\">\r\n            {\r\n                \"plugins\": [\r\n                    [\r\n                    \"babel-plugin-transform-remove-console\"\r\n                    ]\r\n                ]\r\n                }\r\n        </pre>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    \r\n}\r\n</script>\r\n<style lang=\"less\">\r\n\r\n</style>","import mod from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=679df929&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/fb.d7f2e4bf.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',[_vm._v(\"性能优化\")]),_c('p',[_vm._v(\"性能优化主要从以下几个方面入手：\")]),_c('p',[_vm._v(\"1. 构建性能\")]),_c('p',[_vm._v(\"2. 传输性能\")]),_c('p',[_vm._v(\"3. 运行性能\")]),_c('h2',[_vm._v(\"1. 构建性能\")]),_c('p',[_vm._v(\"构建性能是指:从打包开始到打包完毕或者从修改之后点击保存自动打包到页面的更新过程,整个过程都是在开发阶段进行的\")]),_c('p',[_vm._v(\"开发阶段优化了构建性能，可以大大的提高打包速度，从而提升了开发效率\")]),_c('p',[_vm._v(\"构建性能主要可以从以下几个方面考虑：\")]),_c('h3',[_vm._v(\"1.1 减少模块解析\")]),_c('p',[_vm._v(\"webpack中模块解析包括：抽象语法树分析、依赖分析、模块语法替换\")]),_c('h4',[_vm._v(\"不进行解析的模块会怎样？\")]),_c('p',[_vm._v(\"不做解析的模块，在loader处理之后就直接输出\")]),_c('p',[_vm._v(\"不做解析的模块，就少了上面的步骤，从而提升了打包速度\")]),_c('h4',[_vm._v(\"模块不需要解析的前提条件：\")]),_c('p',[_vm._v(\"模块中无其他依赖，如：jquery\")]),_c('h4',[_vm._v(\"配置如下：\")]),_c('pre',[_vm._v(\"        module.exports = {\\n            //...\\n            module: {\\n                noParse: /jquery|lodash/,  // 不解析jqery和loadsh\\n            }\\n        };\\n   \")]),_c('h3',[_vm._v(\"1.2 loader方面的优化\")]),_c('h4',[_vm._v(\"1.2.1 让一些文件不使用loader\")]),_c('p',[_vm._v(\"减少loader的使用可以让一些文件不走loader转换，从而提高了打包速度\")]),_c('p',[_vm._v(\"有些文件或者第三方库本来就是loader转换之后的内容，所以就不需要loader再次解析\")]),_c('p',[_vm._v(\"eg:使用es5或者es3写了一个js文件，或者第三库本来就是使用es5写的代码，所以肯本不再需要 babel-loader进行转换，所以如下设置去除此文件的解析 \")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"      module.exports = {\\n          module: {\\n              rules: [\\n                  {\\n                      test: /\\\\.js$/,\\n                      exclude: /node_modules/,  // 不解析node_modules\\n                      //或\\n                      // include: /src/,  // 指解析src文件夹下的文件\\n                      use: \\\"babel-loader\\\"\\n                  }\\n              ]\\n          }\\n      }\\n   \")]),_c('h4',[_vm._v(\"1.2.2 缓存loader\")]),_c('p',[_vm._v(\"如果一些文件或者第三方库的内容在loader转换之后就不再改变，那么就可以在第一次编译之后进行缓存，以后的 每次打包都直接从缓存中获取 \")]),_c('p',[_vm._v(\"eg: 对于jquery或者其他的第三方库\")]),_c('p',[_vm._v(\"使用cache-loader进行缓存\")]),_c('p',[_vm._v(\"安装\")]),_c('p',[_vm._v(\"npm install --save-dev cache-loader\")]),_c('p',[_vm._v(\"配置\")]),_c('pre',[_vm._v(\"    module.exports = {\\n      module: {\\n        rules: [\\n          {\\n            test: /jquery\\\\.js$/,\\n            use: [ {\\n              loader: 'cache-loader',\\n              options:{\\n                cacheDirectory: \\\"./cache\\\" // 指定缓存到的目录\\n              }\\n            }, 'babel-loader']\\n          },\\n        ],\\n      },\\n    };\\n   \")]),_c('p',[_vm._v(\"原理：\")]),_c('p',[_vm._v(\"匹配到文件之后，走loader的pitch方法，如果pitch方法发现有缓存就返回缓存中的代码，否则就走loader进行解析\")]),_c('img',{attrs:{\"src\":require(\"@img/cache.png\"),\"alt\":\"\"}}),_c('h4',[_vm._v(\"1.2.3 使用thread-loader给loader开启线程池\")]),_c('p',[_vm._v(\"把loader放到线程池中的线程中，以便提高构建速度\")]),_c('p',[_vm._v(\"放入线程池中的loader不能使用以下功能\")]),_c('p',[_vm._v(\"- 不能够使用webpack api\")]),_c('p',[_vm._v(\"- 无法访问webpack options\")]),_c('p',[_vm._v(\"- 无法使用自定义的plugin api\")]),_c('p',[_vm._v(\"注意，开启和管理线程需要消耗时间，在小型项目中使用thread-loader反而会增加构建时间\")]),_c('h4',[_vm._v(\"1.2.4 使用热更新\")]),_c('p',[_vm._v(\"热更新并不能降低构建的时间，可能会增加，但是减少了从更改代码保存到页面呈现的时间\")]),_c('p',[_vm._v(\"配置\")]),_c('p',[_vm._v(\"webpack.config.js\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"      const webpack = require('webpack');\\n      module.exports = {\\n        devServer:{\\n          hot:true // 开启热更新\\n        },\\n        plugins:[ \\n          // 使用热更新插件\\n          new webpack.HotModuleReplacementPlugin()\\n        ]\\n      }\\n   \")]),_c('p',[_vm._v(\"入口文件中\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"      if(module.hot){ // 是否开启了热更新\\n          module.hot.accept() // 接受热更新\\n      }\\n   \")]),_c('p',[_vm._v(\"基本流程\")]),_c('p',[_vm._v(\"在没有使用热更新的时候，每次编译运行，webpack-dev-server都会执行localtion.reload重新加载页面，当使用了 热更新之后，webpack-dev-server会通过websocket把变更的代码主动推送到浏览器，然后通过注入的module.hot.accept进行接收， 然后通过HotModuleReplacementPlugin插件覆盖之前的模块并执行,所以热更新发生在代码运行期 \")]),_c('p',[_vm._v(\"1. 修改一个或者多个文件中的代码\")]),_c('p',[_vm._v(\"2. webpack重新编译构建变更的模块,并通知HMR服务器进行更新\")]),_c('p',[_vm._v(\"3. HMR服务器通过websocket推送变更的模块到客户端\")]),_c('p',[_vm._v(\"4. 客户端通过注入的module.hot.accept接收到变更的内容\")]),_c('p',[_vm._v(\"5. HotModuleReplacementPlugin插件替换更新的模块进行执行\")]),_c('p',[_vm._v(\"6. 如果这些模块无法执行那么就直接执行localtion.reload重新加载页面\")]),_c('p',[_vm._v(\"注意：\")]),_c('p',[_vm._v(\"样式也可以进行热更新，但是通过mini-css-extract-plugin插件生成单独文件的样式不能进行热更新，因为 热更新发生在代码运行时期，而mini-css-extract-plugin插件生成单独css文件发生在构建时期,style-loader 的样式是可以进行热更新 \")]),_c('h2',[_vm._v(\"2. 传输性能\")]),_c('p',[_vm._v(\"传输性能是指：文件从服务端传输到客户端的过程所需要的时间\")]),_c('p',[_vm._v(\"传输性能的提升可以缩短从页面请求到呈现的时间，可以从以下几个方面考虑：\")]),_c('p',[_vm._v(\" - 总传输量：将所有的传输文件内容都加起来就是总传输\")]),_c('p',[_vm._v(\" - 文件数量：需要传输的所有文件数量 \")]),_c('p',[_vm._v(\" - 浏览器缓存： 通过设置可以使得浏览器缓存传输的文件，被缓存的文件再次获取就会从缓存中获取\")]),_c('h3',[_vm._v(\"2.1 打包之后包太大可以分包处理\")]),_c('p',[_vm._v(\"解决的问题：\")]),_c('p',[_vm._v(\"一个文件包太大，导致网络响应很慢\")]),_c('p'),_c('h4',[_vm._v(\" 2.1.1 手动分包\")]),_c('p',[_vm._v(\"基本思路：\")]),_c('p',[_vm._v(\"- 单独的打包公共模块\")]),_c('p',[_vm._v(\"- 公共模块会被打包成动态链接库，并生成资源清单\")]),_c('p',[_vm._v(\"- 根据入口模块进行正常的打包\")]),_c('p',[_vm._v(\"- 在html页面中手动引入单独打包的公共模块\")]),_c('p',[_vm._v(\"步骤：\")]),_c('p',[_vm._v(\"1. 创建webpack.dll.config.js文件\")]),_c('p',[_vm._v(\"用于配置要单独打包的文件，暴露出变量名在全局中\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"      // 手动单独打包的配置\\n      module.exports = {\\n          mode: \\\"production\\\",\\n          entry: { // 需要单独打包的文件\\n              jquery: [\\\"jquery\\\"],\\n              lodash: [\\\"lodash\\\"]\\n          },\\n          output: {\\n              filename: \\\"dll/[name].js\\\",\\n              library: \\\"[name]\\\" // 打包之后暴露的变量名\\n          },\\n          plugins: [\\n              // 生成资源清单\\n              new webpack.DllPlugin({\\n                  path: path.resolve(__dirname,\\\"dll\\\",\\\"[name].manifest.json\\\"), // 资源清单保存的位置\\n                  name: \\\"[name]\\\" // 资源清单中，暴露的变量名\\n              })\\n          ]\\n      }\\n   \")]),_c('p',[_vm._v(\"2. html页面手动引入单独的打包文件\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"     \"),_vm._v(\"\\n     \"),_vm._v(\"\\n   \")]),_c('p',[_vm._v(\"3. webpack.config.js中设置clean-webpack-plugin插件\")]),_c('p',[_vm._v(\"如果使用了clean-webpack-plugin这个插件就需要重新配置，防止每次打包都清空了单独打包的文件\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"      plugins: [ // 插件\\n        new CleanWebpackPlugin({ // 打包前清空目录\\n            // 排除掉dll目录本身和它里面的文件\\n            cleanOnceBeforeBuildPatterns: [\\\"**/*\\\", '!dll', '!dll/*']\\n        }),  \\n      ]\\n   \")]),_c('p',[_vm._v(\"4. webpack.config.js中使用资源清单\")]),_c('p',[_vm._v(\"通过webpack.DllReferencePlugin插件使用生成的资源清单，供正常打包的时候webpack能够根据清单 不打包清单中的文件 \")]),_c('pre',{staticClass:\"code\"},[_vm._v(\"      module.exports = {\\n        plugins:[\\n          new webpack.DllReferencePlugin({\\n            manifest: require(\\\"./dll/jquery.manifest.json\\\")\\n          }),\\n          new webpack.DllReferencePlugin({\\n            manifest: require(\\\"./dll/lodash.manifest.json\\\")\\n          })\\n        ]\\n      }\\n   \")]),_c('p',[_vm._v(\"5. package.json中配置打包命令\")]),_c('p',[_vm._v(\"通过npm run dll执行根据指定配置文件进行打包\")]),_c('pre',{staticClass:\"code\"},[_vm._v(\" \\n     \\\"scripts\\\": {\\n        \\\"dll\\\": \\\"webpack --config webpack.dll.config.js\\\"\\n      },\\n   \")]),_c('p',[_vm._v(\"注意： \")]),_c('p',[_vm._v(\"1.资源清单不参与运行，可以不放在dist目录下\")]),_c('p',[_vm._v(\"2.在html页面中需要手动引入单独打包的文件\")]),_c('p',[_vm._v(\"3.不要对小型的包进行分包处理\")]),_c('p',[_vm._v(\"4.如果是第三方库可以通过CDN引入，无需手动分包\")]),_c('p',[_vm._v(\"优点：\")]),_c('p',[_vm._v(\"1.提高了打包速度\")]),_c('p',[_vm._v(\"2.提高了网络响应速度\")]),_c('p',[_vm._v(\"3.有利于浏览器缓存\")]),_c('p',[_vm._v(\"缺点：\")]),_c('p',[_vm._v(\"1.配置繁琐\")]),_c('p',[_vm._v(\"2.复杂的依赖关系模块操作比较繁琐\")]),_c('p',[_vm._v(\"打包结果\")]),_c('p',[_vm._v(\"先运行单独打包的命令npm run dll\")]),_c('p',[_vm._v(\"再运行项目打包的命令npm run build\")]),_c('img',{attrs:{\"src\":require(\"@img/fb.png\"),\"alt\":\"\"}}),_c('h2',[_vm._v(\"3. 运行性能\")]),_c('p',[_vm._v(\"编写高效的代码\")])])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n       <h1>性能优化</h1>\r\n       <p>性能优化主要从以下几个方面入手：</p>\r\n       <p>1. 构建性能</p>\r\n       <p>2. 传输性能</p>\r\n       <p>3. 运行性能</p>\r\n       <h2>1. 构建性能</h2>\r\n       <p>构建性能是指:从打包开始到打包完毕或者从修改之后点击保存自动打包到页面的更新过程,整个过程都是在开发阶段进行的</p>\r\n       <p>开发阶段优化了构建性能，可以大大的提高打包速度，从而提升了开发效率</p>\r\n       <p>构建性能主要可以从以下几个方面考虑：</p>\r\n       <h3>1.1 减少模块解析</h3>\r\n       <p>webpack中模块解析包括：抽象语法树分析、依赖分析、模块语法替换</p>\r\n       <h4>不进行解析的模块会怎样？</h4>\r\n       <p>不做解析的模块，在loader处理之后就直接输出</p>\r\n       <p>不做解析的模块，就少了上面的步骤，从而提升了打包速度</p>\r\n       <h4>模块不需要解析的前提条件：</h4>\r\n       <p>模块中无其他依赖，如：jquery</p>\r\n       <h4>配置如下：</h4>\r\n       <pre>\r\n            module.exports = {\r\n                //...\r\n                module: {\r\n                    noParse: /jquery|lodash/,  // 不解析jqery和loadsh\r\n                }\r\n            };\r\n       </pre>\r\n       <h3>1.2 loader方面的优化</h3>\r\n       <h4>1.2.1 让一些文件不使用loader</h4>\r\n       <p>减少loader的使用可以让一些文件不走loader转换，从而提高了打包速度</p>\r\n       <p>有些文件或者第三方库本来就是loader转换之后的内容，所以就不需要loader再次解析</p>\r\n       <p>eg:使用es5或者es3写了一个js文件，或者第三库本来就是使用es5写的代码，所以肯本不再需要\r\n         babel-loader进行转换，所以如下设置去除此文件的解析\r\n       </p>\r\n       <pre class=\"code\">\r\n          module.exports = {\r\n              module: {\r\n                  rules: [\r\n                      {\r\n                          test: /\\.js$/,\r\n                          exclude: /node_modules/,  // 不解析node_modules\r\n                          //或\r\n                          // include: /src/,  // 指解析src文件夹下的文件\r\n                          use: \"babel-loader\"\r\n                      }\r\n                  ]\r\n              }\r\n          }\r\n       </pre>\r\n       <h4>1.2.2 缓存loader</h4>\r\n       <p>如果一些文件或者第三方库的内容在loader转换之后就不再改变，那么就可以在第一次编译之后进行缓存，以后的\r\n         每次打包都直接从缓存中获取\r\n       </p>\r\n       <p>eg: 对于jquery或者其他的第三方库</p>\r\n       <p>使用cache-loader进行缓存</p>\r\n       <p>安装</p>\r\n       <p>npm install --save-dev cache-loader</p>\r\n       <p>配置</p>\r\n       <pre>\r\n        module.exports = {\r\n          module: {\r\n            rules: [\r\n              {\r\n                test: /jquery\\.js$/,\r\n                use: [ {\r\n                  loader: 'cache-loader',\r\n                  options:{\r\n                    cacheDirectory: \"./cache\" // 指定缓存到的目录\r\n                  }\r\n                }, 'babel-loader']\r\n              },\r\n            ],\r\n          },\r\n        };\r\n       </pre>\r\n       <p>原理：</p>\r\n       <p>匹配到文件之后，走loader的pitch方法，如果pitch方法发现有缓存就返回缓存中的代码，否则就走loader进行解析</p>\r\n       <img src=\"@img/cache.png\" alt=\"\">\r\n       <h4>1.2.3 使用thread-loader给loader开启线程池</h4>\r\n       <p>把loader放到线程池中的线程中，以便提高构建速度</p>\r\n       <p>放入线程池中的loader不能使用以下功能</p>\r\n       <p>- 不能够使用webpack api</p>\r\n       <p>- 无法访问webpack options</p>\r\n       <p>- 无法使用自定义的plugin api</p>\r\n       <p>注意，开启和管理线程需要消耗时间，在小型项目中使用thread-loader反而会增加构建时间</p>\r\n       <h4>1.2.4 使用热更新</h4>\r\n       <p>热更新并不能降低构建的时间，可能会增加，但是减少了从更改代码保存到页面呈现的时间</p>\r\n       <p>配置</p>\r\n       <p>webpack.config.js</p>\r\n       <pre class=\"code\">\r\n          const webpack = require('webpack');\r\n          module.exports = {\r\n            devServer:{\r\n              hot:true // 开启热更新\r\n            },\r\n            plugins:[ \r\n              // 使用热更新插件\r\n              new webpack.HotModuleReplacementPlugin()\r\n            ]\r\n          }\r\n       </pre>\r\n       <p>入口文件中</p>\r\n       <pre class=\"code\">\r\n          if(module.hot){ // 是否开启了热更新\r\n              module.hot.accept() // 接受热更新\r\n          }\r\n       </pre>\r\n       <p>基本流程</p>\r\n       <p>在没有使用热更新的时候，每次编译运行，webpack-dev-server都会执行localtion.reload重新加载页面，当使用了\r\n         热更新之后，webpack-dev-server会通过websocket把变更的代码主动推送到浏览器，然后通过注入的module.hot.accept进行接收，\r\n         然后通过HotModuleReplacementPlugin插件覆盖之前的模块并执行,所以热更新发生在代码运行期\r\n       </p>\r\n       <p>1. 修改一个或者多个文件中的代码</p>\r\n       <p>2. webpack重新编译构建变更的模块,并通知HMR服务器进行更新</p>\r\n       <p>3. HMR服务器通过websocket推送变更的模块到客户端</p>\r\n       <p>4. 客户端通过注入的module.hot.accept接收到变更的内容</p>\r\n       <p>5. HotModuleReplacementPlugin插件替换更新的模块进行执行</p>\r\n       <p>6. 如果这些模块无法执行那么就直接执行localtion.reload重新加载页面</p>\r\n       <p>注意：</p>\r\n       <p>样式也可以进行热更新，但是通过mini-css-extract-plugin插件生成单独文件的样式不能进行热更新，因为\r\n          热更新发生在代码运行时期，而mini-css-extract-plugin插件生成单独css文件发生在构建时期,style-loader\r\n          的样式是可以进行热更新\r\n       </p>\r\n       <h2>2. 传输性能</h2>\r\n       <p>传输性能是指：文件从服务端传输到客户端的过程所需要的时间</p>\r\n       <p>传输性能的提升可以缩短从页面请求到呈现的时间，可以从以下几个方面考虑：</p>\r\n       <p> - 总传输量：将所有的传输文件内容都加起来就是总传输</p>\r\n       <p> - 文件数量：需要传输的所有文件数量 </p>\r\n       <p> - 浏览器缓存： 通过设置可以使得浏览器缓存传输的文件，被缓存的文件再次获取就会从缓存中获取</p>\r\n       <h3>2.1 打包之后包太大可以分包处理</h3>\r\n       <p>解决的问题：</p>\r\n       <p>一个文件包太大，导致网络响应很慢</p>\r\n       <p></p>\r\n       <h4> 2.1.1 手动分包</h4>\r\n       <p>基本思路：</p>\r\n       <p>- 单独的打包公共模块</p>\r\n       <p>- 公共模块会被打包成动态链接库，并生成资源清单</p>\r\n       <p>- 根据入口模块进行正常的打包</p>\r\n       <p>- 在html页面中手动引入单独打包的公共模块</p>\r\n       <p>步骤：</p>\r\n       <p>1. 创建webpack.dll.config.js文件</p>\r\n       <p>用于配置要单独打包的文件，暴露出变量名在全局中</p>\r\n       <pre class=\"code\">\r\n          // 手动单独打包的配置\r\n          module.exports = {\r\n              mode: \"production\",\r\n              entry: { // 需要单独打包的文件\r\n                  jquery: [\"jquery\"],\r\n                  lodash: [\"lodash\"]\r\n              },\r\n              output: {\r\n                  filename: \"dll/[name].js\",\r\n                  library: \"[name]\" // 打包之后暴露的变量名\r\n              },\r\n              plugins: [\r\n                  // 生成资源清单\r\n                  new webpack.DllPlugin({\r\n                      path: path.resolve(__dirname,\"dll\",\"[name].manifest.json\"), // 资源清单保存的位置\r\n                      name: \"[name]\" // 资源清单中，暴露的变量名\r\n                  })\r\n              ]\r\n          }\r\n       </pre>\r\n       <p>2. html页面手动引入单独的打包文件</p>\r\n       <pre class=\"code\">\r\n         <script src=\"./dll/jquery.js\"></script>\r\n         <script src=\"./dll/lodash.js\"></script>\r\n       </pre>\r\n       <p>3. webpack.config.js中设置clean-webpack-plugin插件</p>\r\n       <p>如果使用了clean-webpack-plugin这个插件就需要重新配置，防止每次打包都清空了单独打包的文件</p>\r\n       <pre class=\"code\">\r\n          plugins: [ // 插件\r\n            new CleanWebpackPlugin({ // 打包前清空目录\r\n                // 排除掉dll目录本身和它里面的文件\r\n                cleanOnceBeforeBuildPatterns: [\"**/*\", '!dll', '!dll/*']\r\n            }),  \r\n          ]\r\n       </pre>\r\n       <p>4. webpack.config.js中使用资源清单</p>\r\n       <p>通过webpack.DllReferencePlugin插件使用生成的资源清单，供正常打包的时候webpack能够根据清单\r\n          不打包清单中的文件\r\n       </p>\r\n       <pre class=\"code\">\r\n          module.exports = {\r\n            plugins:[\r\n              new webpack.DllReferencePlugin({\r\n                manifest: require(\"./dll/jquery.manifest.json\")\r\n              }),\r\n              new webpack.DllReferencePlugin({\r\n                manifest: require(\"./dll/lodash.manifest.json\")\r\n              })\r\n            ]\r\n          }\r\n       </pre>\r\n       <p>5. package.json中配置打包命令</p>\r\n       <p>通过npm run dll执行根据指定配置文件进行打包</p>\r\n       <pre class=\"code\"> \r\n         \"scripts\": {\r\n            \"dll\": \"webpack --config webpack.dll.config.js\"\r\n          },\r\n       </pre>\r\n       <p>注意：  </p>\r\n       <p>1.资源清单不参与运行，可以不放在dist目录下</p>\r\n       <p>2.在html页面中需要手动引入单独打包的文件</p>\r\n       <p>3.不要对小型的包进行分包处理</p>\r\n       <p>4.如果是第三方库可以通过CDN引入，无需手动分包</p>\r\n       <p>优点：</p>\r\n       <p>1.提高了打包速度</p>\r\n       <p>2.提高了网络响应速度</p>\r\n       <p>3.有利于浏览器缓存</p>\r\n       <p>缺点：</p>\r\n       <p>1.配置繁琐</p>\r\n       <p>2.复杂的依赖关系模块操作比较繁琐</p>\r\n       <p>打包结果</p>\r\n       <p>先运行单独打包的命令npm run dll</p>\r\n       <p>再运行项目打包的命令npm run build</p>\r\n       <img src=\"@img/fb.png\" alt=\"\">\r\n       <h2>3. 运行性能</h2>\r\n       <p>编写高效的代码</p>\r\n\r\n\r\n    </div>     \r\n</template>\r\n<script>\r\nexport default {\r\n    metaInfo: {   // 使用vue-meta-info插件\r\n      title: '性能优化', // set a title\r\n      meta: [{                 // set meta\r\n        name: '性能优化',\r\n        content: '性能优化'\r\n      }],\r\n      link: [{                 // set link\r\n        rel: '性能优化',\r\n        href: ''\r\n      }]\r\n    }\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>","import mod from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=31a1c83a&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/rerend2.c40f8323.png\";","module.exports = __webpack_public_path__ + \"img/prerend.40f759c8.png\";","module.exports = __webpack_public_path__ + \"img/cache.e56e5a8f.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v(\" 1-1 \")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n      1-1\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>","import mod from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../../../node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!../../../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=1b5d3eaa&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/_vue-loader@15.9.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}